pub const SERVER_ENTRY_DATA: &str = "// File automatically generated by tuono

import { routeTree } from './routeTree.gen'
import { serverSideRendering } from 'tuono/ssr'

export const renderFn = serverSideRendering(routeTree)
";

pub const CLIENT_ENTRY_DATA: &str = "// File automatically generated by tuono

import { hydrate } from 'tuono/hydration'

// Import the generated route tree
import { routeTree } from './routeTree.gen'

hydrate(routeTree)
";

pub const AXUM_ENTRY_POINT: &str = r##"
// File automatically generated
// Do not manually change it

use axum::extract::Request;
use axum::response::Html;
use axum::{routing::get, Router};
use tower_http::services::ServeDir;
use tuono_lib::{ssr, Ssr};

// MODULE_IMPORTS

#[tokio::main]
async fn main() {
    Ssr::create_platform();

    let app = Router::new()
        // ROUTE_BUILDER
        .fallback_service(ServeDir::new("public").fallback(get(catch_all)));

    let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();
    axum::serve(listener, app).await.unwrap();
}

async fn catch_all(request: Request) -> Html<String> {
    let pathname = &request.uri();
    let headers = &request.headers();

    let req = tuono_lib::Request::new(pathname, headers);


    // TODO: remove unwrap
    let payload = tuono_lib::Payload::new(&req, Box::new(""))
        .client_payload()
        .unwrap();

    let result = ssr::Js::SSR.with(|ssr| ssr.borrow_mut().render_to_string(Some(&payload)));

    match result {
        Ok(html) => Html(html),
        _ => Html("500 internal server error".to_string()),
    }
}
"##;
